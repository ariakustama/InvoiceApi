//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace InvoiceAPI.Models.Db
{
	/// <summary>
	/// Database       : invoicedb
	/// Data Source    : ARIAKUSTAMA\MSSQLSERVER01
	/// Server Version : 14.00.1000
	/// </summary>
	public partial class InvoicedbDB : LinqToDB.Data.DataConnection
	{
		public ITable<Customer>      Customers      { get { return this.GetTable<Customer>(); } }
		public ITable<Invoice>       Invoices       { get { return this.GetTable<Invoice>(); } }
		public ITable<InvoiceDetail> InvoiceDetails { get { return this.GetTable<InvoiceDetail>(); } }
		public ITable<PurchaseOrder> PurchaseOrders { get { return this.GetTable<PurchaseOrder>(); } }
		public ITable<StaticData>    StaticDatas    { get { return this.GetTable<StaticData>(); } }

		public InvoicedbDB()
		{
			InitDataContext();
		}

		public InvoicedbDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(InvoicedbDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(InvoicedbDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="customers")]
	public partial class Customer
	{
		[PrimaryKey, NotNull    ] public string Id              { get; set; } // varchar(36)
		[Column,     NotNull    ] public string CustomerName    { get; set; } // varchar(225)
		[Column,        Nullable] public string CustomerAddress { get; set; } // varchar(225)
		[Column,        Nullable] public string CUstomerLogo    { get; set; } // varchar(225)

		#region Associations

		/// <summary>
		/// FK__invoices__Custom__4AB81AF0_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Invoice> invoicesCustom4AB81AF { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="invoices")]
	public partial class Invoice
	{
		[PrimaryKey, NotNull    ] public string    Id                  { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    PurchaseOrderId     { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    CustomerId          { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    CurrencyId          { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    LanguageId          { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    PurchaseOrderNumber { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    InvoiceNumber       { get; set; } // varchar(36)
		[Column,     NotNull    ] public DateTime  InvoiceDate         { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  InvoiceDue          { get; set; } // datetime
		[Column,        Nullable] public string    InvoiceFrom         { get; set; } // varchar(225)
		[Column,     NotNull    ] public decimal   InvoiceDisc         { get; set; } // decimal(18, 2)
		[Column,        Nullable] public string    InvoiceStatus       { get; set; } // varchar(225)
		[Column,     NotNull    ] public DateTime  AddDate             { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  EditDate            { get; set; } // datetime
		[Column,        Nullable] public DateTime? DeletedAt           { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK__invoices__Curren__4BAC3F29
		/// </summary>
		[Association(ThisKey="CurrencyId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoices__Curren__4BAC3F29", BackReferenceName="invoicesCurren4BAC3F")]
		public StaticData Currency { get; set; }

		/// <summary>
		/// FK__invoices__Custom__4AB81AF0
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoices__Custom__4AB81AF0", BackReferenceName="invoicesCustom4AB81AF")]
		public Customer Customer { get; set; }

		/// <summary>
		/// FK__invoiceDe__Invoi__4D94879B_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="InvoiceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<InvoiceDetail> invoiceDeInvoi4D94879B { get; set; }

		/// <summary>
		/// FK__invoices__Langua__4CA06362
		/// </summary>
		[Association(ThisKey="LanguageId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoices__Langua__4CA06362", BackReferenceName="invoicesLangua4CA")]
		public StaticData Language { get; set; }

		/// <summary>
		/// FK__invoices__Purcha__49C3F6B7
		/// </summary>
		[Association(ThisKey="PurchaseOrderId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoices__Purcha__49C3F6B7", BackReferenceName="invoicesPurcha49C3F6B")]
		public PurchaseOrder PurchaseOrder { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="invoiceDetails")]
	public partial class InvoiceDetail
	{
		[PrimaryKey, NotNull    ] public string    Id                { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    InvoiceId         { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    UomId             { get; set; } // varchar(36)
		[Column,     NotNull    ] public string    InvoiceDetailName { get; set; } // text
		[Column,     NotNull    ] public decimal   InvoiceDetailRate { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public decimal   InvoiceDetailQty  { get; set; } // decimal(18, 2)
		[Column,     NotNull    ] public DateTime  AddDate           { get; set; } // datetime
		[Column,     NotNull    ] public DateTime  EditDate          { get; set; } // datetime
		[Column,        Nullable] public DateTime? DeletedAt         { get; set; } // datetime

		#region Associations

		/// <summary>
		/// FK__invoiceDe__Invoi__4D94879B
		/// </summary>
		[Association(ThisKey="InvoiceId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoiceDe__Invoi__4D94879B", BackReferenceName="invoiceDeInvoi4D94879B")]
		public Invoice Invoice { get; set; }

		/// <summary>
		/// FK__invoiceDe__UomId__4E88ABD4
		/// </summary>
		[Association(ThisKey="UomId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK__invoiceDe__UomId__4E88ABD4", BackReferenceName="invoiceDeUomId4E88ABD")]
		public StaticData Uom { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="purchaseOrders")]
	public partial class PurchaseOrder
	{
		[PrimaryKey, NotNull    ] public string  Id                  { get; set; } // varchar(36)
		[Column,     NotNull    ] public string  PurchaseOrderNumber { get; set; } // varchar(36)
		[Column,     NotNull    ] public decimal Amount              { get; set; } // decimal(18, 2)
		[Column,        Nullable] public string  PIC                 { get; set; } // varchar(225)

		#region Associations

		/// <summary>
		/// FK__invoices__Purcha__49C3F6B7_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PurchaseOrderId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Invoice> invoicesPurcha49C3F6B { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="staticDatas")]
	public partial class StaticData
	{
		[PrimaryKey, NotNull    ] public string Id          { get; set; } // varchar(36)
		[Column,     NotNull    ] public string StaticCode  { get; set; } // varchar(225)
		[Column,     NotNull    ] public string StaticName  { get; set; } // varchar(225)
		[Column,        Nullable] public string StaticGroup { get; set; } // varchar(225)

		#region Associations

		/// <summary>
		/// FK__invoiceDe__UomId__4E88ABD4_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UomId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<InvoiceDetail> invoiceDeUomId4E88ABD { get; set; }

		/// <summary>
		/// FK__invoices__Curren__4BAC3F29_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CurrencyId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Invoice> invoicesCurren4BAC3F { get; set; }

		/// <summary>
		/// FK__invoices__Langua__4CA06362_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LanguageId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Invoice> invoicesLangua4CA { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Customer Find(this ITable<Customer> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Invoice Find(this ITable<Invoice> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static InvoiceDetail Find(this ITable<InvoiceDetail> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PurchaseOrder Find(this ITable<PurchaseOrder> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StaticData Find(this ITable<StaticData> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
